data_source:
  data_folders: data
  training_data_folder:
    folder: training
    train: train.csv
    test: test.csv
  prepared:
    folder: prepared
    clean_train: clean_train.csv

featurize:

  tfidf:
            #max_nunique: -1 #5000
    random_seed: 2023
    dim_reduction: 1
    var_explained: 0.2
    output:
      folder: feature\tfidf
      filename: tfidf.parquet
            #use_features: {} #Case when we want to compute for every possible combination. Used when doing eda

            #use_features: {'RESOURCE', 'RESOURCE_ROLE_CODE', 'RESOURCE_ROLE_DEPTNAME', 'RESOURCE_ROLE_FAMILY', 'RESOURCE_ROLE_FAMILY_DESC', 
            #               'RESOURCE_ROLE_ROLLUP_1', 'RESOURCE_ROLE_ROLLUP_2', 'ROLE_CODE', 'ROLE_DEPTNAME', 'ROLE_DEPTNAME_ROLE_CODE', 
            #               'ROLE_DEPTNAME_ROLE_FAMILY', 'ROLE_DEPTNAME_ROLE_FAMILY_DESC', 'ROLE_FAMILY', 'ROLE_FAMILY_DESC', 'ROLE_FAMILY_DESC_ROLE_CODE', 
            #               'ROLE_FAMILY_DESC_ROLE_FAMILY', 'ROLE_FAMILY_ROLE_CODE', 'ROLE_ROLLUP_1', 'ROLE_ROLLUP_1_ROLE_DEPTNAME', 'ROLE_ROLLUP_1_ROLE_FAMILY',
            #               'ROLE_ROLLUP_1_ROLE_FAMILY_DESC', 'ROLE_ROLLUP_2', 'ROLE_ROLLUP_2_ROLE_CODE','ROLE_ROLLUP_2_ROLE_DEPTNAME', 'ROLE_ROLLUP_2_ROLE_FAMILY', 
            #               'ROLE_ROLLUP_2_ROLE_FAMILY_DESC'}

  count_vector:
    random_seed: 2023
    dim_reduction: 1
    var_explained: 0.9
    output:
      folder: feature\cntvector
      filename: count_vectorizer.parquet
            #use_features: {} #Case when we want to compute for every possible combination. Used when doing eda
            #use_features: {'RESOURCE', 'RESOURCE_ROLE_CODE',  'RESOURCE_ROLE_DEPTNAME',  'RESOURCE_ROLE_FAMILY', 'RESOURCE_ROLE_FAMILY_DESC',  
            #               'RESOURCE_ROLE_ROLLUP_1',  'RESOURCE_ROLE_ROLLUP_2', 'ROLE_CODE',  'ROLE_DEPTNAME',  'ROLE_DEPTNAME_ROLE_CODE', 
            #               'ROLE_DEPTNAME_ROLE_FAMILY', 'ROLE_DEPTNAME_ROLE_FAMILY_DESC', 'ROLE_FAMILY', 'ROLE_FAMILY_DESC', 'ROLE_FAMILY_DESC_ROLE_CODE', 
            #               'ROLE_FAMILY_DESC_ROLE_FAMILY', 'ROLE_FAMILY_ROLE_CODE', 'ROLE_ROLLUP_1', 'ROLE_ROLLUP_1_ROLE_DEPTNAME','ROLE_ROLLUP_1_ROLE_FAMILY', 
            #               'ROLE_ROLLUP_1_ROLE_FAMILY_DESC', 'ROLE_ROLLUP_2', 'ROLE_ROLLUP_2_ROLE_CODE','ROLE_ROLLUP_2_ROLE_DEPTNAME', 'ROLE_ROLLUP_2_ROLE_FAMILY', 
            #               'ROLE_ROLLUP_2_ROLE_FAMILY_DESC',
            #               'ROLE_ROLLUP_1_ROLE_CODE', 'ROLE_ROLLUP_1_ROLE_ROLLUP_2'}
            #permutation_features_col1: {'RESOURCE',  'RESOURCE_ROLE_FAMILY', 'RESOURCE_ROLE_ROLLUP_1', 'ROLE_CODE', 'ROLE_FAMILY',
            #                           'ROLE_FAMILY_DESC', 'ROLE_FAMILY_DESC_ROLE_CODE', 'ROLE_FAMILY_DESC_ROLE_FAMILY', 'ROLE_FAMILY_ROLE_CODE', 
            #                           'ROLE_ROLLUP_1', 'ROLE_ROLLUP_1_ROLE_CODE', 'ROLE_ROLLUP_1_ROLE_DEPTNAME', 'ROLE_ROLLUP_1_ROLE_FAMILY', 
            #                           'ROLE_ROLLUP_1_ROLE_FAMILY_DESC', 'ROLE_ROLLUP_1_ROLE_ROLLUP_2', 'ROLE_ROLLUP_2', 'ROLE_ROLLUP_2_ROLE_CODE', 
            #                           'ROLE_ROLLUP_2_ROLE_FAMILY', 'ROLE_ROLLUP_2_ROLE_FAMILY_DESC'}

            #permutation_features_col2: {'RESOURCE', 'RESOURCE_ROLE_CODE', 'RESOURCE_ROLE_DEPTNAME', 'RESOURCE_ROLE_FAMILY',
            #                            'RESOURCE_ROLE_FAMILY_DESC', 'RESOURCE_ROLE_ROLLUP_1', 'RESOURCE_ROLE_ROLLUP_2', 'ROLE_CODE',
            #                            'ROLE_DEPTNAME', 'ROLE_DEPTNAME_ROLE_CODE', 'ROLE_DEPTNAME_ROLE_FAMILY', 'ROLE_DEPTNAME_ROLE_FAMILY_DESC',
            #                            'ROLE_FAMILY', 'ROLE_FAMILY_DESC', 'ROLE_FAMILY_DESC_ROLE_CODE', 'ROLE_FAMILY_DESC_ROLE_FAMILY',
            #                            'ROLE_FAMILY_ROLE_CODE', 'ROLE_ROLLUP_1', 'ROLE_ROLLUP_1_ROLE_CODE', 'ROLE_ROLLUP_1_ROLE_DEPTNAME',
            #                            'ROLE_ROLLUP_1_ROLE_FAMILY', 'ROLE_ROLLUP_1_ROLE_FAMILY_DESC', 'ROLE_ROLLUP_1_ROLE_ROLLUP_2','ROLE_ROLLUP_2',
            #                            'ROLE_ROLLUP_2_ROLE_CODE', 'ROLE_ROLLUP_2_ROLE_DEPTNAME', 'ROLE_ROLLUP_2_ROLE_FAMILY', 'ROLE_ROLLUP_2_ROLE_FAMILY_DESC'}

train_test_split:
  test_size: 0.01
  random_seed: 45
  train_data: feature\train\train_data.parquet
  test_data: feature\test\test_data.parquet

pipeline_type:
  #combine_feature: True
  KFoldTE: true
  frequency_encoding: false
  KFold_frequency_encoding: false
  tfidf_vectorizer_encoding: false
  count_vectorizer_encoding: true

model:
  model_type: decision_tree

  logistic_reg:
    hyper_params:
      max_iter: 50
      penalty: l2
      C: 1.0
      class_weight: balanced

  decision_tree:
    hyper_params:
      max_depth: 14
      splitter: best
      min_samples_leaf: 0.001
      max_features: 0.3
      #min_samples_split: 0.01
      class_weight: balanced

  extra_decision_tree:
    hyper_params:
      n_estimators: 50
      max_depth: 4

      bootstrap: true
      max_samples: 0.7  #Max sample to consider for bootstrap
      max_features: 0.3
      min_samples_leaf: 0.01

      class_weight: balanced_subsample #balanced

  random_forest:
    hyper_params:
      n_estimators: 100
      max_depth: 6

      bootstrap: true
      max_samples: 0.95 #Max sample to consider for bootstrap
      max_features: 0.6
      min_samples_leaf: 0.002

      class_weight: balanced_subsample #balanced


  trained_model: model\model.pkl
  eval:
    evals: eval
    eval_metrics: metrics
    eval_plots: plots

trained_model:
  model_path: model\model.pkl
   
  params:
    max_depth: 14
    splitter: best
    min_samples_leaf: 0.001
    max_features: 0.3
    #min_samples_split: 0.01
    class_weight: balanced

  pipeline_type:
    KFoldTE: true
    frequency_encoding: false
    KFold_frequency_encoding: false
    tfidf_vectorizer_encoding: false
    count_vectorizer_encoding: true


